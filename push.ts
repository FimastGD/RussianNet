import { execSync } from "child_process";
import * as readline from "readline";
import { existsSync } from "fs";

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout
});

async function askQuestion(question: string, validator?: (input: string) => string | true): Promise<string> {
	return new Promise(resolve => {
		const ask = () => {
			rl.question(`\n${question} `, answer => {
				if (validator) {
					const validation = validator(answer);
					if (validation !== true) {
						console.log(`\n${validation}`);
						return ask();
					}
				}
				resolve(answer);
			});
		};
		ask();
	});
}

async function checkGitSetup() {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Git
		execSync("git rev-parse --is-inside-work-tree", { stdio: "ignore" });

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ origin
		try {
			execSync("git remote get-url origin", { stdio: "ignore" });
		} catch {
			console.log("\n‚ö†Ô∏è –£–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
			const url = execSync("gh repo view --json url --jq .url", { encoding: "utf-8" }).trim();
			if (url) {
				execSync(`git remote add origin ${url}`, { stdio: "inherit" });
			} else {
				const repoUrl = await askQuestion("–í–≤–µ–¥–∏—Ç–µ URL —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (git@github.com:user/repo.git):");
				execSync(`git remote add origin ${repoUrl}`, { stdio: "inherit" });
			}
		}
	} catch {
		console.error("\n‚ùå –≠—Ç–æ –Ω–µ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:");
		console.log("git init");
		console.log("git remote add origin URL_–†–ï–ü–û–ó–ò–¢–û–†–ò–Ø");
		process.exit(1);
	}
}

async function pushChanges() {
	try {
		// –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –æ–±—ã—á–Ω—ã–π push
		execSync("git push --set-upstream origin main", { stdio: "inherit" });
	} catch (error) {
		if (error instanceof Error && error.message.includes("no upstream branch")) {
			console.log("\nüîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º upstream –¥–ª—è –≤–µ—Ç–∫–∏...");
			execSync("git push --set-upstream origin main", { stdio: "inherit" });
		} else {
			throw error;
		}
	}
}

async function main() {
	console.clear();
	console.log("=== Git Push Helper ===\n");

	try {
		await checkGitSetup();

		if (!existsSync(".gitignore")) {
			console.log("\nüìù –°–æ–∑–¥–∞—ë–º .gitignore...");
			execSync('echo "node_modules/\n.env\n*.log\n.DS_Store" > .gitignore', { stdio: "inherit" });
		}

		const commitName = await askQuestion("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞:", val => val.trim().length > 0 || "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");

		const commitDesc = await askQuestion("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):");
		const prefix = await askQuestion(
			"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å ([dev]/[prod]/[fix]/[none]):",
			val => ["dev", "prod", "fix", "none"].includes(val) || "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dev, prod, fix –∏–ª–∏ none"
		);

		const prefixStr = prefix !== "none" ? `[${prefix}] ` : "";
		const commitMessage = `${prefixStr}${commitName}${commitDesc ? "\n\n" + commitDesc : ""}`;

		console.log("\nüìã –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:");
		execSync("git status --porcelain", { stdio: "inherit" });

		const confirm = await askQuestion("\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–º–º–∏—Ç? (y/n):");
		if (confirm.toLowerCase() !== "y") {
			console.log("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º");
			process.exit(0);
		}

		console.log("\nüîÑ –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...");
		execSync("git add .", { stdio: "inherit" });

		console.log("\nüíæ –°–æ–∑–¥–∞—ë–º –∫–æ–º–º–∏—Ç...");
		execSync(`git commit -m "${commitMessage.replace(/"/g, '\\"')}"`, { stdio: "inherit" });

		console.log("\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...");
		await pushChanges();

		console.log("\n‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.");
	} catch (error) {
		console.error("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:");
		if (error instanceof Error) {
			console.error(error.message);
		}
		process.exit(1);
	} finally {
		rl.close();
	}
}

main();
