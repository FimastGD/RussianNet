import { execSync } from 'child_process';
import * as readline from 'readline';
import { existsSync } from 'fs';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –≤–≤–æ–¥–∞
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
async function askQuestion(question: string, validator?: (input: string) => string | true): Promise<string> {
  return new Promise((resolve) => {
    const ask = () => {
      rl.question(question, (answer) => {
        if (validator) {
          const validation = validator(answer);
          if (validation !== true) {
            console.log(validation);
            return ask();
          }
        }
        resolve(answer);
      });
    };
    ask();
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
function checkGitRepo(): void {
  try {
    execSync('git rev-parse --is-inside-work-tree', { stdio: 'ignore' });
  } catch {
    console.error('‚ùå –≠—Ç–æ –Ω–µ Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ init-repo.sh');
    process.exit(1);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞—è node_modules)
function getChangedFiles(): string[] {
  const output = execSync('git status --porcelain', { encoding: 'utf-8' });
  return output
    .split('\n')
    .filter(line => line.trim() && !line.includes('node_modules/'))
    .map(line => line.substring(3).trim());
}

async function main() {
  checkGitRepo();

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore
    if (!existsSync('.gitignore')) {
      console.log('‚ö†Ô∏è –§–∞–π–ª .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é...');
      execSync('echo "node_modules/" >> .gitignore');
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–∏—Ç–∞
    const commitName = await askQuestion(
      '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞: ',
      (val) => val.trim().length > 0 || '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'
    );

    const commitDesc = await askQuestion('–û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ');

    const prefix = await askQuestion(
      '–ü—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–º–∏—Ç–∞ ([dev]/[prod]/[fix]/–ø—É—Å—Ç–æ): ',
      (val) => !val || ['dev', 'prod', 'fix'].includes(val) || '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dev, prod, fix –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º'
    );

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const prefixStr = prefix ? `[${prefix}] ` : '';
    const fullMessage = `${prefixStr}${commitName}${commitDesc ? '\n\n' + commitDesc : ''}`;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const changedFiles = getChangedFiles();
    if (changedFiles.length === 0) {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞.');
      process.exit(0);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    console.log('\n–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    changedFiles.forEach(file => console.log(`- ${file}`));

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const confirm = await askQuestion('\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–º–º–∏—Ç? (y/n): ');
    if (confirm.toLowerCase() !== 'y') {
      console.log('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
      process.exit(0);
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–º–∏—Ç –∏ –ø—É—à
    console.log('\nüîÑ –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
    execSync('git add .', { stdio: 'inherit' });

    console.log('üíæ –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç...');
    execSync(`git commit -m "${fullMessage.replace(/"/g, '\\"')}"`, { stdio: 'inherit' });

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
    execSync('git push', { stdio: 'inherit' });

    console.log('\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:');
    if (error instanceof Error) {
      console.error(error.message);
    }
    process.exit(1);
  } finally {
    rl.close();
  }
}

main();