import { exec } from "child_process";
import { promisify } from "util";
import ColorSide, { ANSI } from "colorside";
import { ANSI256 } from "colorside/ansi256";

const cs = new ColorSide("en");
cs.use(cs.console);
cs.use(cs.input);

const execAsync = promisify(exec);

cs.console.clear();

const COMMIT_NAME_ONLY: unknown = (await cs.input.readtext({
	message: "Enter commit name:",
	messageColor: ANSI.format.bold + ANSI.fg.bright.cyan,
	prefix: cs.fg.bright.blue(">"),
	answerColor: ANSI.fg.white
})) as string;

const COMMIT_PREFIX: unknown = (await cs.input.readlist({
	message: "Enter commit prefix:",
	answerColor: ANSI.fg.bright.white,
	prefix: cs.fg.bright.blue(">"),
	messageColor: ANSI.format.bold + ANSI.fg.bright.cyan,
	choices: [
		{ name: "[dev]", value: "[dev]" },
		{ name: "[prod]", value: "[prod]" },
		{ name: "[fix]", value: "[fix]" },
		{ name: "[test]", value: "[test]" },
		{ name: "Without prefix", value: "no" }
	],
	selectColors: [{ keys: ["Without prefix"], color: ANSI256.get.fg("#ff7878") }]
})) as string;

const COMMIT_NAME: string = String(COMMIT_PREFIX !== "no" ? COMMIT_PREFIX : "") + " " + String(COMMIT_NAME_ONLY);
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–º–º–∏—Ç–∞
// const COMMIT_NAME = "Fix user authentication bug";
/*const COMMIT_DESC: string | null = `- Fixed login validation logic
- Added proper error handling for invalid credentials
- Updated user session management
- Added unit tests for auth service`;*/
const COMMIT_DESC: string | null = null;

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å null –æ–ø–∏—Å–∞–Ω–∏–µ–º
// const COMMIT_NAME = "Update README";
// const COMMIT_DESC: string | null = null;

interface GitPushResult {
	success: boolean;
	message: string;
	stdout?: string;
	stderr?: string;
}

class GitAutoPush {
	private projectPath: string;
	private branch: string;

	constructor(projectPath: string = process.cwd(), branch: string = "main") {
		this.projectPath = projectPath;
		this.branch = branch;
	}

	/**
	 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É git –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	 */
	private async executeGitCommand(command: string): Promise<{ stdout: string; stderr: string }> {
		try {
			const { stdout, stderr } = await execAsync(command, {
				cwd: this.projectPath,
				maxBuffer: 1024 * 1024 // 1MB buffer
			});
			return { stdout, stderr };
		} catch (error: any) {
			throw new Error(`Git command failed: ${error.message}`);
		}
	}

	/**
	 * –§–æ—Ä–º–∏—Ä—É–µ—Ç commit message —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–ª–∏ –±–µ–∑
	 */
	private buildCommitMessage(title: string, description: string | null): string {
		if (description) {
			// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
			const escapedDesc = description.replace(/"/g, '\\"');
			return `"${title}" -m "${escapedDesc}"`;
		}
		return `"${title}"`;
	}

	/**
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	 */
	async checkStatus(): Promise<string> {
		const { stdout } = await this.executeGitCommand("git status --porcelain");
		return stdout.trim();
	}

	/**
	 * –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ staging
	 */
	async addChanges(): Promise<void> {
		await this.executeGitCommand("git add -A");
		console.log("‚úì Changes added to staging");
	}

	/**
	 * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç
	 */
	async createCommit(title: string, description: string | null): Promise<void> {
		const commitMessage = this.buildCommitMessage(title, description);
		const command = `git commit -m ${commitMessage}`;

		await this.executeGitCommand(command);
		console.log(`‚úì Commit created: ${title}`);
	}

	/**
	 * –ü—É—à–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ remote —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	 */
	async pushToRemote(): Promise<void> {
		const command = `git push origin ${this.branch}`;
		const { stdout, stderr } = await this.executeGitCommand(command);

		if (stderr && !stderr.includes("up-to-date")) {
			console.log("Push output:", stderr);
		}
		console.log("‚úì Changes pushed to remote repository");
	}

	/**
	 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—É—à–∞
	 */
	async autoPush(commitName: string, commitDesc: string | null): Promise<GitPushResult> {
		try {
			console.log("üöÄ Starting auto push process...");

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			const status = await this.checkStatus();
			if (!status) {
				return {
					success: false,
					message: "No changes detected to commit"
				};
			}

			console.log("üìù Changes detected:");
			console.log(status);

			// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
			await this.addChanges();

			// –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
			await this.createCommit(commitName, commitDesc);

			// –ü—É—à–∏–º –≤ remote
			await this.pushToRemote();

			return {
				success: true,
				message: "Successfully pushed changes to remote repository"
			};
		} catch (error: any) {
			return {
				success: false,
				message: `Error during git operations: ${error.message}`,
				stderr: error.message
			};
		}
	}

	/**
	 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
	 */
	async showRecentCommits(count: number = 5): Promise<void> {
		try {
			const { stdout } = await this.executeGitCommand(`git log --oneline -${count}`);
			console.log("\nüìã Recent commits:");
			console.log(stdout);
		} catch (error) {
			console.error("Error showing commits:", error);
		}
	}
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
async function main() {
	const gitPush = new GitAutoPush("/path/to/your/project", "main");

	try {
		// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É—à
		const result = await gitPush.autoPush(COMMIT_NAME, COMMIT_DESC);

		if (result.success) {
			console.log("‚úÖ", result.message);

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
			await gitPush.showRecentCommits();
		} else {
			console.error("‚ùå", result.message);
		}
	} catch (error) {
		console.error("üí• Unexpected error:", error);
	}
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
export { GitAutoPush, COMMIT_NAME, COMMIT_DESC };

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
	main();
}
